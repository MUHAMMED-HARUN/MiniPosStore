// <auto-generated />
using System;
using DAL.EF.AppDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20251023154229_updateunionioitvf")]
    partial class updateunionioitvf
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "42f84904-5174-4783-bd93-d07b716e14d5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "22acdc0a-5634-4354-b946-65f9aa3ba59f",
                            RoleId = "42f84904-5174-4783-bd93-d07b716e14d5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsCustomer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsExpenseType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsExpenses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ActionByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActionByUser");

                    b.HasIndex("ExpenseTypeID");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsImportOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ActionByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PaidAmount")
                        .HasColumnType("real");

                    b.Property<byte>("PaymentStatus")
                        .HasColumnType("tinyint");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<int?>("clsProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActionByUser");

                    b.HasIndex("SupplierID");

                    b.HasIndex("clsProductID");

                    b.ToTable("ImportOrders");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsImportOrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ImportOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("ImportOrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("ImportOrderItems");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsImportRawMaterialItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ImportOrderID")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("RawMaterialID")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ImportOrderID");

                    b.HasIndex("RawMaterialID");

                    b.ToTable("ImportRawMaterialItems");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsLogRegister", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActoinByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActoinByUser");

                    b.ToTable("LogRegisters");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ActionByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PaidAmount")
                        .HasColumnType("real");

                    b.Property<byte>("PaymentStatus")
                        .HasColumnType("tinyint");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("ActionByUser");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsOrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<float?>("PriceAdjustment")
                        .HasColumnType("real");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("real");

                    b.Property<float>("WholesalePrice")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsPerson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "TestFirstName",
                            LastName = "TestLastName",
                            PhoneNumber = "12345678901"
                        });
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ActionByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ActionType")
                        .HasColumnType("tinyint");

                    b.Property<float>("AvailableQuantity")
                        .HasColumnType("real");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ReservedQuantity")
                        .HasColumnType("real");

                    b.Property<float>("RetailPrice")
                        .HasColumnType("real");

                    b.Property<int>("UOMID")
                        .HasColumnType("int");

                    b.Property<float>("WholesalePrice")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("ActionByUser");

                    b.HasIndex("UOMID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRawMaterial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<float>("AvailableQuantity")
                        .HasColumnType("real");

                    b.Property<int>("CurrencyTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialSupplier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real");

                    b.Property<float?>("ReservedQuantity")
                        .HasColumnType("real");

                    b.Property<int>("UOMID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("MaterialSupplier");

                    b.HasIndex("UOMID");

                    b.HasIndex("UserID");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRawMaterialOrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("RawMaterialID")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<double>("WholesalePrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("RawMaterialID");

                    b.ToTable("RawMaterialOrderItems");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRecipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("YieldQuantity")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRecipeInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialID")
                        .HasColumnType("int");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<float>("RequiredMaterialQuantity")
                        .HasColumnType("real");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("RawMaterialID");

                    b.HasIndex("RecipeID");

                    b.HasIndex("UserID");

                    b.ToTable("RecipeInfos");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsSupplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsUnitOfMeasure", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UnitOfMeasures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "قطعة",
                            Seymbol = "قطعة"
                        },
                        new
                        {
                            ID = 2,
                            Name = "كيلوغرام",
                            Seymbol = "كجم"
                        },
                        new
                        {
                            ID = 3,
                            Name = "جرام",
                            Seymbol = "جم"
                        },
                        new
                        {
                            ID = 4,
                            Name = "لتر",
                            Seymbol = "لتر"
                        },
                        new
                        {
                            ID = 5,
                            Name = "متر",
                            Seymbol = "م"
                        },
                        new
                        {
                            ID = 6,
                            Name = "صندوق",
                            Seymbol = "صندوق"
                        },
                        new
                        {
                            ID = 7,
                            Name = "علبة",
                            Seymbol = "علبة"
                        },
                        new
                        {
                            ID = 8,
                            Name = "زجاجة",
                            Seymbol = "زجاجة"
                        });
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "22acdc0a-5634-4354-b946-65f9aa3ba59f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8ee8f3f-bb0c-4cca-8a90-16908a0394a1",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKN1Q0v0N6EGUE+65tv/1gi5wAscw5C5jz48YHSOCAtnqV0ugh+BzTNv5xg1KHlkbA==",
                            Permissions = 0,
                            PersonID = 1,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "533d3988-b415-4b5a-a0bd-9a998082f4d6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsCustomer", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsPerson", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("SharedModels.EF.Models.clsCustomer", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsExpenses", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany()
                        .HasForeignKey("ActionByUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsImportOrder", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany("ImportOrders")
                        .HasForeignKey("ActionByUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsSupplier", "Supplier")
                        .WithMany("ImportOrders")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsProduct", null)
                        .WithMany("ImportedProducts")
                        .HasForeignKey("clsProductID");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsImportOrderItem", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsImportOrder", "ImportOrder")
                        .WithMany("ImportOrderItems")
                        .HasForeignKey("ImportOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsImportRawMaterialItem", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsImportOrder", "ImportOrder")
                        .WithMany("ImportRawMaterialItems")
                        .HasForeignKey("ImportOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsRawMaterial", "RawMaterial")
                        .WithMany("ImportRawMaterialItems")
                        .HasForeignKey("RawMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportOrder");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsLogRegister", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany("LogRegister")
                        .HasForeignKey("ActoinByUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsOrder", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("ActionByUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsCustomer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsOrderItem", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsOrder", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsProduct", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsProduct", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("ActionByUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsUnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UOMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRawMaterial", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("MaterialSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsUnitOfMeasure", "unitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UOMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("User");

                    b.Navigation("unitOfMeasure");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRawMaterialOrderItem", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsOrder", "Order")
                        .WithMany("RawMaterialOrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsRawMaterial", "RawMaterial")
                        .WithMany("RawMaterialOrderItems")
                        .HasForeignKey("RawMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRecipe", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsProduct", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRecipeInfo", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsRawMaterial", "RawMaterial")
                        .WithMany("RecipeInfos")
                        .HasForeignKey("RawMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsRecipe", "Recipe")
                        .WithMany("RecipeInfos")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.EF.Models.clsUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsSupplier", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsPerson", "Person")
                        .WithMany("Suppliers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsUser", b =>
                {
                    b.HasOne("SharedModels.EF.Models.clsPerson", "Person")
                        .WithOne("User")
                        .HasForeignKey("SharedModels.EF.Models.clsUser", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsCustomer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsImportOrder", b =>
                {
                    b.Navigation("ImportOrderItems");

                    b.Navigation("ImportRawMaterialItems");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsOrder", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("RawMaterialOrderItems");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsPerson", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Suppliers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsProduct", b =>
                {
                    b.Navigation("ImportedProducts");

                    b.Navigation("OrderItems");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRawMaterial", b =>
                {
                    b.Navigation("ImportRawMaterialItems");

                    b.Navigation("RawMaterialOrderItems");

                    b.Navigation("RecipeInfos");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsRecipe", b =>
                {
                    b.Navigation("RecipeInfos");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsSupplier", b =>
                {
                    b.Navigation("ImportOrders");
                });

            modelBuilder.Entity("SharedModels.EF.Models.clsUser", b =>
                {
                    b.Navigation("ImportOrders");

                    b.Navigation("LogRegister");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
